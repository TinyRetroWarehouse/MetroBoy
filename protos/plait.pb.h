// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plait.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plait_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plait_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plait_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plait_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plait_2eproto;
namespace plait {
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class CellDB;
class CellDBDefaultTypeInternal;
extern CellDBDefaultTypeInternal _CellDB_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Plait;
class PlaitDefaultTypeInternal;
extern PlaitDefaultTypeInternal _Plait_default_instance_;
}  // namespace plait
PROTOBUF_NAMESPACE_OPEN
template<> ::plait::Cell* Arena::CreateMaybeMessage<::plait::Cell>(Arena*);
template<> ::plait::CellDB* Arena::CreateMaybeMessage<::plait::CellDB>(Arena*);
template<> ::plait::Frame* Arena::CreateMaybeMessage<::plait::Frame>(Arena*);
template<> ::plait::Node* Arena::CreateMaybeMessage<::plait::Node>(Arena*);
template<> ::plait::Plait* Arena::CreateMaybeMessage<::plait::Plait>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace plait {

// ===================================================================

class Cell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plait.Cell) */ {
 public:
  inline Cell() : Cell(nullptr) {}
  virtual ~Cell();

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cell& default_instance();

  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cell* New() const final {
    return CreateMaybeMessage<Cell>(nullptr);
  }

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plait.Cell";
  }
  protected:
  explicit Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plait_2eproto);
    return ::descriptor_table_plait_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 7,
    kNameFieldNumber = 1,
    kTagFieldNumber = 2,
    kPageFieldNumber = 3,
    kTypeFieldNumber = 4,
    kDocFieldNumber = 5,
    kGuidFieldNumber = 6,
  };
  // repeated string args = 7;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string tag = 2;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // required string page = 3;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  const std::string& page() const;
  void set_page(const std::string& value);
  void set_page(std::string&& value);
  void set_page(const char* value);
  void set_page(const char* value, size_t size);
  std::string* mutable_page();
  std::string* release_page();
  void set_allocated_page(std::string* page);
  private:
  const std::string& _internal_page() const;
  void _internal_set_page(const std::string& value);
  std::string* _internal_mutable_page();
  public:

  // required string type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string doc = 5;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const std::string& doc() const;
  void set_doc(const std::string& value);
  void set_doc(std::string&& value);
  void set_doc(const char* value);
  void set_doc(const char* value, size_t size);
  std::string* mutable_doc();
  std::string* release_doc();
  void set_allocated_doc(std::string* doc);
  private:
  const std::string& _internal_doc() const;
  void _internal_set_doc(const std::string& value);
  std::string* _internal_mutable_doc();
  public:

  // required uint64 guid = 6;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:plait.Cell)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guid_;
  friend struct ::TableStruct_plait_2eproto;
};
// -------------------------------------------------------------------

class CellDB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plait.CellDB) */ {
 public:
  inline CellDB() : CellDB(nullptr) {}
  virtual ~CellDB();

  CellDB(const CellDB& from);
  CellDB(CellDB&& from) noexcept
    : CellDB() {
    *this = ::std::move(from);
  }

  inline CellDB& operator=(const CellDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDB& operator=(CellDB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellDB& default_instance();

  static inline const CellDB* internal_default_instance() {
    return reinterpret_cast<const CellDB*>(
               &_CellDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CellDB& a, CellDB& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDB* New() const final {
    return CreateMaybeMessage<CellDB>(nullptr);
  }

  CellDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDB& from);
  void MergeFrom(const CellDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plait.CellDB";
  }
  protected:
  explicit CellDB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plait_2eproto);
    return ::descriptor_table_plait_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .plait.Cell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::plait::Cell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Cell >*
      mutable_cells();
  private:
  const ::plait::Cell& _internal_cells(int index) const;
  ::plait::Cell* _internal_add_cells();
  public:
  const ::plait::Cell& cells(int index) const;
  ::plait::Cell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Cell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:plait.CellDB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Cell > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plait_2eproto;
};
// -------------------------------------------------------------------

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plait.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plait.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plait_2eproto);
    return ::descriptor_table_plait_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kCellIdFieldNumber = 2,
    kOriginXFieldNumber = 3,
    kOriginYFieldNumber = 4,
    kScaleXFieldNumber = 5,
    kScaleYFieldNumber = 6,
  };
  // required uint64 guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 cell_id = 2;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double origin_x = 3;
  bool has_origin_x() const;
  private:
  bool _internal_has_origin_x() const;
  public:
  void clear_origin_x();
  double origin_x() const;
  void set_origin_x(double value);
  private:
  double _internal_origin_x() const;
  void _internal_set_origin_x(double value);
  public:

  // required double origin_y = 4;
  bool has_origin_y() const;
  private:
  bool _internal_has_origin_y() const;
  public:
  void clear_origin_y();
  double origin_y() const;
  void set_origin_y(double value);
  private:
  double _internal_origin_y() const;
  void _internal_set_origin_y(double value);
  public:

  // required double scale_x = 5;
  bool has_scale_x() const;
  private:
  bool _internal_has_scale_x() const;
  public:
  void clear_scale_x();
  double scale_x() const;
  void set_scale_x(double value);
  private:
  double _internal_scale_x() const;
  void _internal_set_scale_x(double value);
  public:

  // required double scale_y = 6;
  bool has_scale_y() const;
  private:
  bool _internal_has_scale_y() const;
  public:
  void clear_scale_y();
  double scale_y() const;
  void set_scale_y(double value);
  private:
  double _internal_scale_y() const;
  void _internal_set_scale_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:plait.Node)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cell_id_;
  double origin_x_;
  double origin_y_;
  double scale_x_;
  double scale_y_;
  friend struct ::TableStruct_plait_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plait.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plait.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plait_2eproto);
    return ::descriptor_table_plait_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildNodesFieldNumber = 9,
    kChildFramesFieldNumber = 10,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDocFieldNumber = 4,
    kGuidFieldNumber = 1,
    kOriginXFieldNumber = 5,
    kOriginYFieldNumber = 6,
    kScaleXFieldNumber = 7,
    kScaleYFieldNumber = 8,
  };
  // repeated .plait.Node child_nodes = 9;
  int child_nodes_size() const;
  private:
  int _internal_child_nodes_size() const;
  public:
  void clear_child_nodes();
  ::plait::Node* mutable_child_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Node >*
      mutable_child_nodes();
  private:
  const ::plait::Node& _internal_child_nodes(int index) const;
  ::plait::Node* _internal_add_child_nodes();
  public:
  const ::plait::Node& child_nodes(int index) const;
  ::plait::Node* add_child_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Node >&
      child_nodes() const;

  // repeated .plait.Frame child_frames = 10;
  int child_frames_size() const;
  private:
  int _internal_child_frames_size() const;
  public:
  void clear_child_frames();
  ::plait::Frame* mutable_child_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >*
      mutable_child_frames();
  private:
  const ::plait::Frame& _internal_child_frames(int index) const;
  ::plait::Frame* _internal_add_child_frames();
  public:
  const ::plait::Frame& child_frames(int index) const;
  ::plait::Frame* add_child_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >&
      child_frames() const;

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string doc = 4;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const std::string& doc() const;
  void set_doc(const std::string& value);
  void set_doc(std::string&& value);
  void set_doc(const char* value);
  void set_doc(const char* value, size_t size);
  std::string* mutable_doc();
  std::string* release_doc();
  void set_allocated_doc(std::string* doc);
  private:
  const std::string& _internal_doc() const;
  void _internal_set_doc(const std::string& value);
  std::string* _internal_mutable_doc();
  public:

  // required uint64 guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double origin_x = 5;
  bool has_origin_x() const;
  private:
  bool _internal_has_origin_x() const;
  public:
  void clear_origin_x();
  double origin_x() const;
  void set_origin_x(double value);
  private:
  double _internal_origin_x() const;
  void _internal_set_origin_x(double value);
  public:

  // required double origin_y = 6;
  bool has_origin_y() const;
  private:
  bool _internal_has_origin_y() const;
  public:
  void clear_origin_y();
  double origin_y() const;
  void set_origin_y(double value);
  private:
  double _internal_origin_y() const;
  void _internal_set_origin_y(double value);
  public:

  // required double scale_x = 7;
  bool has_scale_x() const;
  private:
  bool _internal_has_scale_x() const;
  public:
  void clear_scale_x();
  double scale_x() const;
  void set_scale_x(double value);
  private:
  double _internal_scale_x() const;
  void _internal_set_scale_x(double value);
  public:

  // required double scale_y = 8;
  bool has_scale_y() const;
  private:
  bool _internal_has_scale_y() const;
  public:
  void clear_scale_y();
  double scale_y() const;
  void set_scale_y(double value);
  private:
  double _internal_scale_y() const;
  void _internal_set_scale_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:plait.Frame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Node > child_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame > child_frames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guid_;
  double origin_x_;
  double origin_y_;
  double scale_x_;
  double scale_y_;
  friend struct ::TableStruct_plait_2eproto;
};
// -------------------------------------------------------------------

class Plait PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plait.Plait) */ {
 public:
  inline Plait() : Plait(nullptr) {}
  virtual ~Plait();

  Plait(const Plait& from);
  Plait(Plait&& from) noexcept
    : Plait() {
    *this = ::std::move(from);
  }

  inline Plait& operator=(const Plait& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plait& operator=(Plait&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Plait& default_instance();

  static inline const Plait* internal_default_instance() {
    return reinterpret_cast<const Plait*>(
               &_Plait_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Plait& a, Plait& b) {
    a.Swap(&b);
  }
  inline void Swap(Plait* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plait* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plait* New() const final {
    return CreateMaybeMessage<Plait>(nullptr);
  }

  Plait* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plait>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plait& from);
  void MergeFrom(const Plait& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plait* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plait.Plait";
  }
  protected:
  explicit Plait(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plait_2eproto);
    return ::descriptor_table_plait_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFramesFieldNumber = 1,
  };
  // repeated .plait.Frame root_frames = 1;
  int root_frames_size() const;
  private:
  int _internal_root_frames_size() const;
  public:
  void clear_root_frames();
  ::plait::Frame* mutable_root_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >*
      mutable_root_frames();
  private:
  const ::plait::Frame& _internal_root_frames(int index) const;
  ::plait::Frame* _internal_add_root_frames();
  public:
  const ::plait::Frame& root_frames(int index) const;
  ::plait::Frame* add_root_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >&
      root_frames() const;

  // @@protoc_insertion_point(class_scope:plait.Plait)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame > root_frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plait_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cell

// required string name = 1;
inline bool Cell::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cell::has_name() const {
  return _internal_has_name();
}
inline void Cell::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Cell::name() const {
  // @@protoc_insertion_point(field_get:plait.Cell.name)
  return _internal_name();
}
inline void Cell::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plait.Cell.name)
}
inline std::string* Cell::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plait.Cell.name)
  return _internal_mutable_name();
}
inline const std::string& Cell::_internal_name() const {
  return name_.Get();
}
inline void Cell::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Cell.name)
}
inline void Cell::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Cell.name)
}
inline void Cell::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Cell.name)
}
inline std::string* Cell::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_name() {
  // @@protoc_insertion_point(field_release:plait.Cell.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Cell.name)
}

// required string tag = 2;
inline bool Cell::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Cell::has_tag() const {
  return _internal_has_tag();
}
inline void Cell::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Cell::tag() const {
  // @@protoc_insertion_point(field_get:plait.Cell.tag)
  return _internal_tag();
}
inline void Cell::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:plait.Cell.tag)
}
inline std::string* Cell::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:plait.Cell.tag)
  return _internal_mutable_tag();
}
inline const std::string& Cell::_internal_tag() const {
  return tag_.Get();
}
inline void Cell::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Cell.tag)
}
inline void Cell::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Cell.tag)
}
inline void Cell::set_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Cell.tag)
}
inline std::string* Cell::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000002u;
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_tag() {
  // @@protoc_insertion_point(field_release:plait.Cell.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Cell.tag)
}

// required string page = 3;
inline bool Cell::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Cell::has_page() const {
  return _internal_has_page();
}
inline void Cell::clear_page() {
  page_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Cell::page() const {
  // @@protoc_insertion_point(field_get:plait.Cell.page)
  return _internal_page();
}
inline void Cell::set_page(const std::string& value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:plait.Cell.page)
}
inline std::string* Cell::mutable_page() {
  // @@protoc_insertion_point(field_mutable:plait.Cell.page)
  return _internal_mutable_page();
}
inline const std::string& Cell::_internal_page() const {
  return page_.Get();
}
inline void Cell::_internal_set_page(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_page(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  page_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Cell.page)
}
inline void Cell::set_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Cell.page)
}
inline void Cell::set_page(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Cell.page)
}
inline std::string* Cell::_internal_mutable_page() {
  _has_bits_[0] |= 0x00000004u;
  return page_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_page() {
  // @@protoc_insertion_point(field_release:plait.Cell.page)
  if (!_internal_has_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return page_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_page(std::string* page) {
  if (page != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  page_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Cell.page)
}

// required string type = 4;
inline bool Cell::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Cell::has_type() const {
  return _internal_has_type();
}
inline void Cell::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Cell::type() const {
  // @@protoc_insertion_point(field_get:plait.Cell.type)
  return _internal_type();
}
inline void Cell::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plait.Cell.type)
}
inline std::string* Cell::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plait.Cell.type)
  return _internal_mutable_type();
}
inline const std::string& Cell::_internal_type() const {
  return type_.Get();
}
inline void Cell::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Cell.type)
}
inline void Cell::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Cell.type)
}
inline void Cell::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Cell.type)
}
inline std::string* Cell::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000008u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_type() {
  // @@protoc_insertion_point(field_release:plait.Cell.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Cell.type)
}

// optional string doc = 5;
inline bool Cell::_internal_has_doc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Cell::has_doc() const {
  return _internal_has_doc();
}
inline void Cell::clear_doc() {
  doc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Cell::doc() const {
  // @@protoc_insertion_point(field_get:plait.Cell.doc)
  return _internal_doc();
}
inline void Cell::set_doc(const std::string& value) {
  _internal_set_doc(value);
  // @@protoc_insertion_point(field_set:plait.Cell.doc)
}
inline std::string* Cell::mutable_doc() {
  // @@protoc_insertion_point(field_mutable:plait.Cell.doc)
  return _internal_mutable_doc();
}
inline const std::string& Cell::_internal_doc() const {
  return doc_.Get();
}
inline void Cell::_internal_set_doc(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  doc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Cell::set_doc(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  doc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Cell.doc)
}
inline void Cell::set_doc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  doc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Cell.doc)
}
inline void Cell::set_doc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  doc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Cell.doc)
}
inline std::string* Cell::_internal_mutable_doc() {
  _has_bits_[0] |= 0x00000010u;
  return doc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_doc() {
  // @@protoc_insertion_point(field_release:plait.Cell.doc)
  if (!_internal_has_doc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return doc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_doc(std::string* doc) {
  if (doc != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  doc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Cell.doc)
}

// required uint64 guid = 6;
inline bool Cell::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Cell::has_guid() const {
  return _internal_has_guid();
}
inline void Cell::clear_guid() {
  guid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::guid() const {
  // @@protoc_insertion_point(field_get:plait.Cell.guid)
  return _internal_guid();
}
inline void Cell::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  guid_ = value;
}
inline void Cell::set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:plait.Cell.guid)
}

// repeated string args = 7;
inline int Cell::_internal_args_size() const {
  return args_.size();
}
inline int Cell::args_size() const {
  return _internal_args_size();
}
inline void Cell::clear_args() {
  args_.Clear();
}
inline std::string* Cell::add_args() {
  // @@protoc_insertion_point(field_add_mutable:plait.Cell.args)
  return _internal_add_args();
}
inline const std::string& Cell::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& Cell::args(int index) const {
  // @@protoc_insertion_point(field_get:plait.Cell.args)
  return _internal_args(index);
}
inline std::string* Cell::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:plait.Cell.args)
  return args_.Mutable(index);
}
inline void Cell::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plait.Cell.args)
  args_.Mutable(index)->assign(value);
}
inline void Cell::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plait.Cell.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void Cell::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plait.Cell.args)
}
inline void Cell::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plait.Cell.args)
}
inline std::string* Cell::_internal_add_args() {
  return args_.Add();
}
inline void Cell::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plait.Cell.args)
}
inline void Cell::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plait.Cell.args)
}
inline void Cell::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plait.Cell.args)
}
inline void Cell::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plait.Cell.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Cell::args() const {
  // @@protoc_insertion_point(field_list:plait.Cell.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Cell::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:plait.Cell.args)
  return &args_;
}

// -------------------------------------------------------------------

// CellDB

// repeated .plait.Cell cells = 1;
inline int CellDB::_internal_cells_size() const {
  return cells_.size();
}
inline int CellDB::cells_size() const {
  return _internal_cells_size();
}
inline void CellDB::clear_cells() {
  cells_.Clear();
}
inline ::plait::Cell* CellDB::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:plait.CellDB.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Cell >*
CellDB::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:plait.CellDB.cells)
  return &cells_;
}
inline const ::plait::Cell& CellDB::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::plait::Cell& CellDB::cells(int index) const {
  // @@protoc_insertion_point(field_get:plait.CellDB.cells)
  return _internal_cells(index);
}
inline ::plait::Cell* CellDB::_internal_add_cells() {
  return cells_.Add();
}
inline ::plait::Cell* CellDB::add_cells() {
  // @@protoc_insertion_point(field_add:plait.CellDB.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Cell >&
CellDB::cells() const {
  // @@protoc_insertion_point(field_list:plait.CellDB.cells)
  return cells_;
}

// -------------------------------------------------------------------

// Node

// required uint64 guid = 1;
inline bool Node::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_guid() const {
  return _internal_has_guid();
}
inline void Node::clear_guid() {
  guid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::guid() const {
  // @@protoc_insertion_point(field_get:plait.Node.guid)
  return _internal_guid();
}
inline void Node::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  guid_ = value;
}
inline void Node::set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:plait.Node.guid)
}

// required uint64 cell_id = 2;
inline bool Node::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Node::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void Node::clear_cell_id() {
  cell_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Node::cell_id() const {
  // @@protoc_insertion_point(field_get:plait.Node.cell_id)
  return _internal_cell_id();
}
inline void Node::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  cell_id_ = value;
}
inline void Node::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:plait.Node.cell_id)
}

// required double origin_x = 3;
inline bool Node::_internal_has_origin_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Node::has_origin_x() const {
  return _internal_has_origin_x();
}
inline void Node::clear_origin_x() {
  origin_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Node::_internal_origin_x() const {
  return origin_x_;
}
inline double Node::origin_x() const {
  // @@protoc_insertion_point(field_get:plait.Node.origin_x)
  return _internal_origin_x();
}
inline void Node::_internal_set_origin_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  origin_x_ = value;
}
inline void Node::set_origin_x(double value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:plait.Node.origin_x)
}

// required double origin_y = 4;
inline bool Node::_internal_has_origin_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Node::has_origin_y() const {
  return _internal_has_origin_y();
}
inline void Node::clear_origin_y() {
  origin_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Node::_internal_origin_y() const {
  return origin_y_;
}
inline double Node::origin_y() const {
  // @@protoc_insertion_point(field_get:plait.Node.origin_y)
  return _internal_origin_y();
}
inline void Node::_internal_set_origin_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  origin_y_ = value;
}
inline void Node::set_origin_y(double value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:plait.Node.origin_y)
}

// required double scale_x = 5;
inline bool Node::_internal_has_scale_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Node::has_scale_x() const {
  return _internal_has_scale_x();
}
inline void Node::clear_scale_x() {
  scale_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Node::_internal_scale_x() const {
  return scale_x_;
}
inline double Node::scale_x() const {
  // @@protoc_insertion_point(field_get:plait.Node.scale_x)
  return _internal_scale_x();
}
inline void Node::_internal_set_scale_x(double value) {
  _has_bits_[0] |= 0x00000010u;
  scale_x_ = value;
}
inline void Node::set_scale_x(double value) {
  _internal_set_scale_x(value);
  // @@protoc_insertion_point(field_set:plait.Node.scale_x)
}

// required double scale_y = 6;
inline bool Node::_internal_has_scale_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Node::has_scale_y() const {
  return _internal_has_scale_y();
}
inline void Node::clear_scale_y() {
  scale_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Node::_internal_scale_y() const {
  return scale_y_;
}
inline double Node::scale_y() const {
  // @@protoc_insertion_point(field_get:plait.Node.scale_y)
  return _internal_scale_y();
}
inline void Node::_internal_set_scale_y(double value) {
  _has_bits_[0] |= 0x00000020u;
  scale_y_ = value;
}
inline void Node::set_scale_y(double value) {
  _internal_set_scale_y(value);
  // @@protoc_insertion_point(field_set:plait.Node.scale_y)
}

// -------------------------------------------------------------------

// Frame

// required uint64 guid = 1;
inline bool Frame::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Frame::has_guid() const {
  return _internal_has_guid();
}
inline void Frame::clear_guid() {
  guid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frame::guid() const {
  // @@protoc_insertion_point(field_get:plait.Frame.guid)
  return _internal_guid();
}
inline void Frame::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  guid_ = value;
}
inline void Frame::set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:plait.Frame.guid)
}

// required string name = 2;
inline bool Frame::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Frame::has_name() const {
  return _internal_has_name();
}
inline void Frame::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Frame::name() const {
  // @@protoc_insertion_point(field_get:plait.Frame.name)
  return _internal_name();
}
inline void Frame::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plait.Frame.name)
}
inline std::string* Frame::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plait.Frame.name)
  return _internal_mutable_name();
}
inline const std::string& Frame::_internal_name() const {
  return name_.Get();
}
inline void Frame::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Frame::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Frame.name)
}
inline void Frame::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Frame.name)
}
inline void Frame::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Frame.name)
}
inline std::string* Frame::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame::release_name() {
  // @@protoc_insertion_point(field_release:plait.Frame.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Frame.name)
}

// required string type = 3;
inline bool Frame::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Frame::has_type() const {
  return _internal_has_type();
}
inline void Frame::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Frame::type() const {
  // @@protoc_insertion_point(field_get:plait.Frame.type)
  return _internal_type();
}
inline void Frame::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plait.Frame.type)
}
inline std::string* Frame::mutable_type() {
  // @@protoc_insertion_point(field_mutable:plait.Frame.type)
  return _internal_mutable_type();
}
inline const std::string& Frame::_internal_type() const {
  return type_.Get();
}
inline void Frame::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Frame::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Frame.type)
}
inline void Frame::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Frame.type)
}
inline void Frame::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Frame.type)
}
inline std::string* Frame::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame::release_type() {
  // @@protoc_insertion_point(field_release:plait.Frame.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Frame.type)
}

// optional string doc = 4;
inline bool Frame::_internal_has_doc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Frame::has_doc() const {
  return _internal_has_doc();
}
inline void Frame::clear_doc() {
  doc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Frame::doc() const {
  // @@protoc_insertion_point(field_get:plait.Frame.doc)
  return _internal_doc();
}
inline void Frame::set_doc(const std::string& value) {
  _internal_set_doc(value);
  // @@protoc_insertion_point(field_set:plait.Frame.doc)
}
inline std::string* Frame::mutable_doc() {
  // @@protoc_insertion_point(field_mutable:plait.Frame.doc)
  return _internal_mutable_doc();
}
inline const std::string& Frame::_internal_doc() const {
  return doc_.Get();
}
inline void Frame::_internal_set_doc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Frame::set_doc(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  doc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plait.Frame.doc)
}
inline void Frame::set_doc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  doc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plait.Frame.doc)
}
inline void Frame::set_doc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  doc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plait.Frame.doc)
}
inline std::string* Frame::_internal_mutable_doc() {
  _has_bits_[0] |= 0x00000004u;
  return doc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame::release_doc() {
  // @@protoc_insertion_point(field_release:plait.Frame.doc)
  if (!_internal_has_doc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return doc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame::set_allocated_doc(std::string* doc) {
  if (doc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  doc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plait.Frame.doc)
}

// required double origin_x = 5;
inline bool Frame::_internal_has_origin_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Frame::has_origin_x() const {
  return _internal_has_origin_x();
}
inline void Frame::clear_origin_x() {
  origin_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Frame::_internal_origin_x() const {
  return origin_x_;
}
inline double Frame::origin_x() const {
  // @@protoc_insertion_point(field_get:plait.Frame.origin_x)
  return _internal_origin_x();
}
inline void Frame::_internal_set_origin_x(double value) {
  _has_bits_[0] |= 0x00000010u;
  origin_x_ = value;
}
inline void Frame::set_origin_x(double value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:plait.Frame.origin_x)
}

// required double origin_y = 6;
inline bool Frame::_internal_has_origin_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Frame::has_origin_y() const {
  return _internal_has_origin_y();
}
inline void Frame::clear_origin_y() {
  origin_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Frame::_internal_origin_y() const {
  return origin_y_;
}
inline double Frame::origin_y() const {
  // @@protoc_insertion_point(field_get:plait.Frame.origin_y)
  return _internal_origin_y();
}
inline void Frame::_internal_set_origin_y(double value) {
  _has_bits_[0] |= 0x00000020u;
  origin_y_ = value;
}
inline void Frame::set_origin_y(double value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:plait.Frame.origin_y)
}

// required double scale_x = 7;
inline bool Frame::_internal_has_scale_x() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Frame::has_scale_x() const {
  return _internal_has_scale_x();
}
inline void Frame::clear_scale_x() {
  scale_x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Frame::_internal_scale_x() const {
  return scale_x_;
}
inline double Frame::scale_x() const {
  // @@protoc_insertion_point(field_get:plait.Frame.scale_x)
  return _internal_scale_x();
}
inline void Frame::_internal_set_scale_x(double value) {
  _has_bits_[0] |= 0x00000040u;
  scale_x_ = value;
}
inline void Frame::set_scale_x(double value) {
  _internal_set_scale_x(value);
  // @@protoc_insertion_point(field_set:plait.Frame.scale_x)
}

// required double scale_y = 8;
inline bool Frame::_internal_has_scale_y() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Frame::has_scale_y() const {
  return _internal_has_scale_y();
}
inline void Frame::clear_scale_y() {
  scale_y_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Frame::_internal_scale_y() const {
  return scale_y_;
}
inline double Frame::scale_y() const {
  // @@protoc_insertion_point(field_get:plait.Frame.scale_y)
  return _internal_scale_y();
}
inline void Frame::_internal_set_scale_y(double value) {
  _has_bits_[0] |= 0x00000080u;
  scale_y_ = value;
}
inline void Frame::set_scale_y(double value) {
  _internal_set_scale_y(value);
  // @@protoc_insertion_point(field_set:plait.Frame.scale_y)
}

// repeated .plait.Node child_nodes = 9;
inline int Frame::_internal_child_nodes_size() const {
  return child_nodes_.size();
}
inline int Frame::child_nodes_size() const {
  return _internal_child_nodes_size();
}
inline void Frame::clear_child_nodes() {
  child_nodes_.Clear();
}
inline ::plait::Node* Frame::mutable_child_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:plait.Frame.child_nodes)
  return child_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Node >*
Frame::mutable_child_nodes() {
  // @@protoc_insertion_point(field_mutable_list:plait.Frame.child_nodes)
  return &child_nodes_;
}
inline const ::plait::Node& Frame::_internal_child_nodes(int index) const {
  return child_nodes_.Get(index);
}
inline const ::plait::Node& Frame::child_nodes(int index) const {
  // @@protoc_insertion_point(field_get:plait.Frame.child_nodes)
  return _internal_child_nodes(index);
}
inline ::plait::Node* Frame::_internal_add_child_nodes() {
  return child_nodes_.Add();
}
inline ::plait::Node* Frame::add_child_nodes() {
  // @@protoc_insertion_point(field_add:plait.Frame.child_nodes)
  return _internal_add_child_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Node >&
Frame::child_nodes() const {
  // @@protoc_insertion_point(field_list:plait.Frame.child_nodes)
  return child_nodes_;
}

// repeated .plait.Frame child_frames = 10;
inline int Frame::_internal_child_frames_size() const {
  return child_frames_.size();
}
inline int Frame::child_frames_size() const {
  return _internal_child_frames_size();
}
inline void Frame::clear_child_frames() {
  child_frames_.Clear();
}
inline ::plait::Frame* Frame::mutable_child_frames(int index) {
  // @@protoc_insertion_point(field_mutable:plait.Frame.child_frames)
  return child_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >*
Frame::mutable_child_frames() {
  // @@protoc_insertion_point(field_mutable_list:plait.Frame.child_frames)
  return &child_frames_;
}
inline const ::plait::Frame& Frame::_internal_child_frames(int index) const {
  return child_frames_.Get(index);
}
inline const ::plait::Frame& Frame::child_frames(int index) const {
  // @@protoc_insertion_point(field_get:plait.Frame.child_frames)
  return _internal_child_frames(index);
}
inline ::plait::Frame* Frame::_internal_add_child_frames() {
  return child_frames_.Add();
}
inline ::plait::Frame* Frame::add_child_frames() {
  // @@protoc_insertion_point(field_add:plait.Frame.child_frames)
  return _internal_add_child_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >&
Frame::child_frames() const {
  // @@protoc_insertion_point(field_list:plait.Frame.child_frames)
  return child_frames_;
}

// -------------------------------------------------------------------

// Plait

// repeated .plait.Frame root_frames = 1;
inline int Plait::_internal_root_frames_size() const {
  return root_frames_.size();
}
inline int Plait::root_frames_size() const {
  return _internal_root_frames_size();
}
inline void Plait::clear_root_frames() {
  root_frames_.Clear();
}
inline ::plait::Frame* Plait::mutable_root_frames(int index) {
  // @@protoc_insertion_point(field_mutable:plait.Plait.root_frames)
  return root_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >*
Plait::mutable_root_frames() {
  // @@protoc_insertion_point(field_mutable_list:plait.Plait.root_frames)
  return &root_frames_;
}
inline const ::plait::Frame& Plait::_internal_root_frames(int index) const {
  return root_frames_.Get(index);
}
inline const ::plait::Frame& Plait::root_frames(int index) const {
  // @@protoc_insertion_point(field_get:plait.Plait.root_frames)
  return _internal_root_frames(index);
}
inline ::plait::Frame* Plait::_internal_add_root_frames() {
  return root_frames_.Add();
}
inline ::plait::Frame* Plait::add_root_frames() {
  // @@protoc_insertion_point(field_add:plait.Plait.root_frames)
  return _internal_add_root_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plait::Frame >&
Plait::root_frames() const {
  // @@protoc_insertion_point(field_list:plait.Plait.root_frames)
  return root_frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plait

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plait_2eproto

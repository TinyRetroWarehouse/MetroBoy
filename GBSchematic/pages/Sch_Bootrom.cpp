#include "Sch_Bootrom.h"

#include "Sch_System.h"
#include "Sch_BusControl.h"
#include "Sch_Decoder.h"
#include "Sch_Resets.h"

namespace Schematics {

//-----------------------------------------------------------------------------

static const uint8_t DMG_ROM_bin[] = {
  0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32,
  0xcb, 0x7c, 0x20, 0xfb, 0x21, 0x26, 0xff, 0x0e,
  0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3,
  0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0,
  0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1a,
  0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
  0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06,
  0x08, 0x1a, 0x13, 0x22, 0x23, 0x05, 0x20, 0xf9,
  0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99,
  0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20,
  0xf9, 0x2e, 0x0f, 0x18, 0xf3, 0x67, 0x3e, 0x64,
  0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
  0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90,
  0x20, 0xfa, 0x0d, 0x20, 0xf7, 0x1d, 0x20, 0xf2,
  0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62,
  0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06,
  0x7b, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xf0, 0x42,
  0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
  0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04,
  0xc5, 0xcb, 0x11, 0x17, 0xc1, 0xcb, 0x11, 0x17,
  0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9,

  // the logo @ 0x00A8
  0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b,
  0x03, 0x73, 0x00, 0x83, 0x00, 0x0c, 0x00, 0x0d,
  0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
  0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99,
  0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec, 0xcc,
  0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e,

  0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c,
  0x21, 0x04, 0x01, 0x11, 0xa8, 0x00, 0x1a, 0x13,
  0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
  0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20,
  0xfb, 0x86, 0x20, 0xfe, 0x3e, 0x01, 0xe0, 0x50
};

void Bootrom::tick(const SysSignals& sys_sig,
                   const BusSignals& bus_sig,
                   const RstSignals& rst_sig,
                   const DecoderSignals& dec_sig,
                   BusTristates& bus_tri) {


  /*p07.TULO*/ wire ADDR_00XX  = nor(bus_tri.A15(), bus_tri.A14(), bus_tri.A13(), bus_tri.A12(), bus_tri.A11(), bus_tri.A10(), bus_tri.A09(), bus_tri.A08());
  /*p07.TERA*/ wire BOOT_BITn  = not(BOOT_BIT);
  /*p07.TUTU*/ wire ADDR_BOOT  = and(BOOT_BITn, ADDR_00XX);

  /*p07.ZORO*/ wire ADDR_0XXX = nor(bus_tri.A15(), bus_tri.A14(), bus_tri.A13(), bus_tri.A12());
  /*p07.ZADU*/ wire ADDR_X0XX = nor(bus_tri.A11(), bus_tri.A10(), bus_tri.A09(), bus_tri.A08());
  /*p07.ZUFA*/ wire ADDR_00XX2 = and(ADDR_0XXX, ADDR_X0XX);
  /*p07.YAZA*/ wire MODE_DBG1n = not(sys_sig.MODE_DBG1);
  /*p07.YULA*/ wire BOOT_RD    = and(bus_sig.TEDO_CPURD, MODE_DBG1n, ADDR_BOOT);
  /*p07.ZADO*/ wire BOOT_CSn   = nand(BOOT_RD, ADDR_00XX2);
  /*p07.ZERY*/ wire BOOT_CS    = not(BOOT_CSn);

  /*p07.ZYBA*/ wire ADDR_00n = not(bus_tri.A00());
  /*p07.ZUVY*/ wire ADDR_01n = not(bus_tri.A01());
  /*p07.ZUFY*/ wire ADDR_04n = not(bus_tri.A04());
  /*p07.ZERA*/ wire ADDR_05n = not(bus_tri.A05());
  /*p07.ZOLE*/ wire ADDR_00 = and(ADDR_01n, ADDR_00n);
  /*p07.ZAJE*/ wire ADDR_01 = and(ADDR_01n, bus_tri.A00());
  /*p07.ZUBU*/ wire ADDR_10 = and(bus_tri.A01(), ADDR_00n);
  /*p07.ZAPY*/ wire ADDR_11 = and(bus_tri.A01(), bus_tri.A00());

  /*p07.ZETE*/ wire BOOTROM_A1nA0n = not(ADDR_00);
  /*p07.ZEFU*/ wire BOOTROM_A1nA0  = not(ADDR_01);
  /*p07.ZYRO*/ wire BOOTROM_A1A0n  = not(ADDR_10);
  /*p07.ZAPA*/ wire BOOTROM_A1A0   = not(ADDR_11);
  /*p07.ZYGA*/ wire BOOTROM_A2n    = not(bus_tri.A02());
  /*p07.ZYKY*/ wire BOOTROM_A3n    = not(bus_tri.A03());
  /*p07.ZYKY*/ wire BOOTROM_A5nA4n = and(ADDR_05n, ADDR_04n);
  /*p07.ZYGA*/ wire BOOTROM_A5nA4  = and(ADDR_05n, bus_tri.A04());
  /*p07.ZOVY*/ wire BOOTROM_A5A4n  = and(bus_tri.A05(), ADDR_04n);
  /*p07.ZUKO*/ wire BOOTROM_A5A4   = and(bus_tri.A05(), bus_tri.A04());
  /*p07.ZAGE*/ wire BOOTROM_A6n    = not(bus_tri.A06());
  /*p07.ZYRA*/ wire BOOTROM_A7n    = not(bus_tri.A07());

  /*p07.TYRO*/ wire ADDR_0x0x0000 = nor(bus_tri.A07(), bus_tri.A05(), bus_tri.A03(), bus_tri.A02(), bus_tri.A01(), bus_tri.A00());
  /*p07.TUFA*/ wire ADDR_x1x1xxxx = and(bus_tri.A04(), bus_tri.A06());
  /*p07.TEXE*/ wire FF50_RD  = and (bus_sig.TEDO_CPURD, dec_sig.ADDR_FFXX, ADDR_0x0x0000, ADDR_x1x1xxxx);
  /*p07.TUGE*/ wire FF50_WRn = nand(bus_sig.TAPU_CPUWR, dec_sig.ADDR_FFXX, ADDR_0x0x0000, ADDR_x1x1xxxx);
  /*p07.SATO*/ wire BOOT_BIT_IN  = or(bus_tri.D0(), BOOT_BIT);
  
  /*p07.TEPU*/ BOOT_BIT.set(FF50_WRn, rst_sig.SYS_RESETn, BOOT_BIT_IN);

  /*p07.SYPU*/ if (FF50_RD) bus_tri.set_data(BOOT_BIT);

  // how does this not collide with cart reads?
  if (BOOT_CS && BOOT_RD) {
    uint16_t addr = (uint16_t)bus_tri.get_addr();
    bus_tri.set_data(DMG_ROM_bin[addr & 0xFF]);
  }
}

//-----------------------------------------------------------------------------

};
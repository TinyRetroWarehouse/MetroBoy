#include "Signals.h"

//-----------------------------------------------------------------------------

const Reg2 Reg2::D0C0   = {REG_D0C0};
const Reg2 Reg2::D1C0   = {REG_D1C0};
const Reg2 Reg2::D0C1   = {REG_D0C1};
const Reg2 Reg2::D1C1   = {REG_D1C1};

const Pin2 Pin2::HZNP   = {PIN_HZNP};
const Pin2 Pin2::HOLD_0 = {PIN_D0NP | SIG_HOLD};
const Pin2 Pin2::HOLD_1 = {PIN_D1NP | SIG_HOLD};
const Pin2 Pin2::HOLD_Z = {PIN_HZNP | SIG_HOLD};

//-----------------------------------------------------------------------------

#define CHECK_LOGIC(A, B, C) static_assert(logic_lut1[uint8_t(A) | uint8_t(B)] == uint8_t(C));

// all reg states + x = x
CHECK_LOGIC(REG_D0C0, SIG_XXXX, REG_XXXX);
CHECK_LOGIC(REG_D1C0, SIG_XXXX, REG_XXXX);
CHECK_LOGIC(REG_D0C1, SIG_XXXX, REG_XXXX);
CHECK_LOGIC(REG_D1C1, SIG_XXXX, REG_XXXX);

// all reg states + z = x
CHECK_LOGIC(REG_D0C0, SIG_ZZZZ, REG_XXXX);
CHECK_LOGIC(REG_D1C0, SIG_ZZZZ, REG_XXXX);
CHECK_LOGIC(REG_D0C1, SIG_ZZZZ, REG_XXXX);
CHECK_LOGIC(REG_D1C1, SIG_ZZZZ, REG_XXXX);

// all reg states + clocked signal = set to new signal value if clock goes high, copy clock
CHECK_LOGIC(REG_D0C0, SIG_D0C0, REG_D0C0);
CHECK_LOGIC(REG_D0C0, SIG_D1C0, REG_D0C0);
CHECK_LOGIC(REG_D0C0, SIG_D0C1, REG_D0C1);
CHECK_LOGIC(REG_D0C0, SIG_D1C1, REG_D1C1);

CHECK_LOGIC(REG_D1C0, SIG_D0C0, REG_D1C0);
CHECK_LOGIC(REG_D1C0, SIG_D1C0, REG_D1C0);
CHECK_LOGIC(REG_D1C0, SIG_D0C1, REG_D0C1);
CHECK_LOGIC(REG_D1C0, SIG_D1C1, REG_D1C1);

CHECK_LOGIC(REG_D0C1, SIG_D0C0, REG_D0C0);
CHECK_LOGIC(REG_D0C1, SIG_D1C0, REG_D0C0);
CHECK_LOGIC(REG_D0C1, SIG_D0C1, REG_D0C1);
CHECK_LOGIC(REG_D0C1, SIG_D1C1, REG_D0C1);

CHECK_LOGIC(REG_D1C1, SIG_D0C0, REG_D1C0);
CHECK_LOGIC(REG_D1C1, SIG_D1C0, REG_D1C0);
CHECK_LOGIC(REG_D1C1, SIG_D0C1, REG_D1C1);
CHECK_LOGIC(REG_D1C1, SIG_D1C1, REG_D1C1);

// all reg states + async signal = set to new signal value, copy clock
CHECK_LOGIC(REG_D0C0, SIG_A0C0, REG_D0C0);
CHECK_LOGIC(REG_D0C0, SIG_A1C0, REG_D1C0);
CHECK_LOGIC(REG_D0C0, SIG_A0C1, REG_D0C1);
CHECK_LOGIC(REG_D0C0, SIG_A1C1, REG_D1C1);

CHECK_LOGIC(REG_D1C0, SIG_A0C0, REG_D0C0);
CHECK_LOGIC(REG_D1C0, SIG_A1C0, REG_D1C0);
CHECK_LOGIC(REG_D1C0, SIG_A0C1, REG_D0C1);
CHECK_LOGIC(REG_D1C0, SIG_A1C1, REG_D1C1);

CHECK_LOGIC(REG_D0C1, SIG_A0C0, REG_D0C0);
CHECK_LOGIC(REG_D0C1, SIG_A1C0, REG_D1C0);
CHECK_LOGIC(REG_D0C1, SIG_A0C1, REG_D0C1);
CHECK_LOGIC(REG_D0C1, SIG_A1C1, REG_D1C1);

CHECK_LOGIC(REG_D1C1, SIG_A0C0, REG_D0C0);
CHECK_LOGIC(REG_D1C1, SIG_A1C0, REG_D1C0);
CHECK_LOGIC(REG_D1C1, SIG_A0C1, REG_D0C1);
CHECK_LOGIC(REG_D1C1, SIG_A1C1, REG_D1C1);

//-----------------------------------------------------------------------------

// lo-z pin states + x = x
CHECK_LOGIC(PIN_D0PD, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_D1PD, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_D0PU, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_D1PU, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_D0NP, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_D1NP, SIG_XXXX, PIN_XXXX);

// lo-z pin state + z = corresponding hi-z pin state
CHECK_LOGIC(PIN_D0PD, SIG_ZZZZ, PIN_HZPD);
CHECK_LOGIC(PIN_D0PD, SIG_ZZZZ, PIN_HZPD);
CHECK_LOGIC(PIN_D1PD, SIG_ZZZZ, PIN_HZPD);
CHECK_LOGIC(PIN_D0PU, SIG_ZZZZ, PIN_HZPU);
CHECK_LOGIC(PIN_D1PU, SIG_ZZZZ, PIN_HZPU);
CHECK_LOGIC(PIN_D0NP, SIG_ZZZZ, PIN_HZNP);
CHECK_LOGIC(PIN_D1NP, SIG_ZZZZ, PIN_HZNP);

// lo-z pin state + clocked signal = lo-z pin state, ignores clock
CHECK_LOGIC(PIN_D0PD, SIG_D0C0, PIN_D0PD);
CHECK_LOGIC(PIN_D0PD, SIG_D1C0, PIN_D1PD);
CHECK_LOGIC(PIN_D0PD, SIG_D0C1, PIN_D0PD);
CHECK_LOGIC(PIN_D0PD, SIG_D1C1, PIN_D1PD);

CHECK_LOGIC(PIN_D1PD, SIG_D0C0, PIN_D0PD);
CHECK_LOGIC(PIN_D1PD, SIG_D1C0, PIN_D1PD);
CHECK_LOGIC(PIN_D1PD, SIG_D0C1, PIN_D0PD);
CHECK_LOGIC(PIN_D1PD, SIG_D1C1, PIN_D1PD);

CHECK_LOGIC(PIN_D0PU, SIG_D0C0, PIN_D0PU);
CHECK_LOGIC(PIN_D0PU, SIG_D1C0, PIN_D1PU);
CHECK_LOGIC(PIN_D0PU, SIG_D0C1, PIN_D0PU);
CHECK_LOGIC(PIN_D0PU, SIG_D1C1, PIN_D1PU);

CHECK_LOGIC(PIN_D1PU, SIG_D0C0, PIN_D0PU);
CHECK_LOGIC(PIN_D1PU, SIG_D1C0, PIN_D1PU);
CHECK_LOGIC(PIN_D1PU, SIG_D0C1, PIN_D0PU);
CHECK_LOGIC(PIN_D1PU, SIG_D1C1, PIN_D1PU);

CHECK_LOGIC(PIN_D0NP, SIG_D0C0, PIN_D0NP);
CHECK_LOGIC(PIN_D0NP, SIG_D1C0, PIN_D1NP);
CHECK_LOGIC(PIN_D0NP, SIG_D0C1, PIN_D0NP);
CHECK_LOGIC(PIN_D0NP, SIG_D1C1, PIN_D1NP);

CHECK_LOGIC(PIN_D1NP, SIG_D0C0, PIN_D0NP);
CHECK_LOGIC(PIN_D1NP, SIG_D1C0, PIN_D1NP);
CHECK_LOGIC(PIN_D1NP, SIG_D0C1, PIN_D0NP);
CHECK_LOGIC(PIN_D1NP, SIG_D1C1, PIN_D1NP);

// lo-z pin state + clocked signal + Z = lo-z pin state

CHECK_LOGIC(PIN_D0PD, SIG_D0C0 | SIG_ZZZZ, PIN_D0PD);
CHECK_LOGIC(PIN_D0PD, SIG_D1C0 | SIG_ZZZZ, PIN_D1PD);
CHECK_LOGIC(PIN_D0PD, SIG_D0C1 | SIG_ZZZZ, PIN_D0PD);
CHECK_LOGIC(PIN_D0PD, SIG_D1C1 | SIG_ZZZZ, PIN_D1PD);

CHECK_LOGIC(PIN_D1PD, SIG_D0C0 | SIG_ZZZZ, PIN_D0PD);
CHECK_LOGIC(PIN_D1PD, SIG_D1C0 | SIG_ZZZZ, PIN_D1PD);
CHECK_LOGIC(PIN_D1PD, SIG_D0C1 | SIG_ZZZZ, PIN_D0PD);
CHECK_LOGIC(PIN_D1PD, SIG_D1C1 | SIG_ZZZZ, PIN_D1PD);

CHECK_LOGIC(PIN_D0PU, SIG_D0C0 | SIG_ZZZZ, PIN_D0PU);
CHECK_LOGIC(PIN_D0PU, SIG_D1C0 | SIG_ZZZZ, PIN_D1PU);
CHECK_LOGIC(PIN_D0PU, SIG_D0C1 | SIG_ZZZZ, PIN_D0PU);
CHECK_LOGIC(PIN_D0PU, SIG_D1C1 | SIG_ZZZZ, PIN_D1PU);

CHECK_LOGIC(PIN_D1PU, SIG_D0C0 | SIG_ZZZZ, PIN_D0PU);
CHECK_LOGIC(PIN_D1PU, SIG_D1C0 | SIG_ZZZZ, PIN_D1PU);
CHECK_LOGIC(PIN_D1PU, SIG_D0C1 | SIG_ZZZZ, PIN_D0PU);
CHECK_LOGIC(PIN_D1PU, SIG_D1C1 | SIG_ZZZZ, PIN_D1PU);

CHECK_LOGIC(PIN_D0NP, SIG_D0C0 | SIG_ZZZZ, PIN_D0NP);
CHECK_LOGIC(PIN_D0NP, SIG_D1C0 | SIG_ZZZZ, PIN_D1NP);
CHECK_LOGIC(PIN_D0NP, SIG_D0C1 | SIG_ZZZZ, PIN_D0NP);
CHECK_LOGIC(PIN_D0NP, SIG_D1C1 | SIG_ZZZZ, PIN_D1NP);

CHECK_LOGIC(PIN_D1NP, SIG_D0C0 | SIG_ZZZZ, PIN_D0NP);
CHECK_LOGIC(PIN_D1NP, SIG_D1C0 | SIG_ZZZZ, PIN_D1NP);
CHECK_LOGIC(PIN_D1NP, SIG_D0C1 | SIG_ZZZZ, PIN_D0NP);
CHECK_LOGIC(PIN_D1NP, SIG_D1C1 | SIG_ZZZZ, PIN_D1NP);

//-----------------------------------------------------------------------------

// hi-z pin states + x = x
CHECK_LOGIC(PIN_HZPD, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_HZPU, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_HZNP, SIG_XXXX, PIN_XXXX);

// hi-z pin states + z = no change
CHECK_LOGIC(PIN_HZPD, SIG_ZZZZ, PIN_HZPD);
CHECK_LOGIC(PIN_HZPU, SIG_ZZZZ, PIN_HZPU);
CHECK_LOGIC(PIN_HZNP, SIG_ZZZZ, PIN_HZNP);

// hi-z pin state + clocked signal = lo-z pin state, ignores clock
CHECK_LOGIC(PIN_HZPD, SIG_D0C0, PIN_D0PD);
CHECK_LOGIC(PIN_HZPD, SIG_D1C0, PIN_D1PD);
CHECK_LOGIC(PIN_HZPD, SIG_D0C1, PIN_D0PD);
CHECK_LOGIC(PIN_HZPD, SIG_D1C1, PIN_D1PD);

CHECK_LOGIC(PIN_HZPU, SIG_D0C0, PIN_D0PU);
CHECK_LOGIC(PIN_HZPU, SIG_D1C0, PIN_D1PU);
CHECK_LOGIC(PIN_HZPU, SIG_D0C1, PIN_D0PU);
CHECK_LOGIC(PIN_HZPU, SIG_D1C1, PIN_D1PU);

CHECK_LOGIC(PIN_HZNP, SIG_D0C0, PIN_D0NP);
CHECK_LOGIC(PIN_HZNP, SIG_D1C0, PIN_D1NP);
CHECK_LOGIC(PIN_HZNP, SIG_D0C1, PIN_D0NP);
CHECK_LOGIC(PIN_HZNP, SIG_D1C1, PIN_D1NP);

// hi-z pin state + clocked signal + Z = lo-z pin state, ignores clock
CHECK_LOGIC(PIN_HZPD, SIG_D0C0 | SIG_ZZZZ, PIN_D0PD);
CHECK_LOGIC(PIN_HZPD, SIG_D1C0 | SIG_ZZZZ, PIN_D1PD);
CHECK_LOGIC(PIN_HZPD, SIG_D0C1 | SIG_ZZZZ, PIN_D0PD);
CHECK_LOGIC(PIN_HZPD, SIG_D1C1 | SIG_ZZZZ, PIN_D1PD);

CHECK_LOGIC(PIN_HZPU, SIG_D0C0 | SIG_ZZZZ, PIN_D0PU);
CHECK_LOGIC(PIN_HZPU, SIG_D1C0 | SIG_ZZZZ, PIN_D1PU);
CHECK_LOGIC(PIN_HZPU, SIG_D0C1 | SIG_ZZZZ, PIN_D0PU);
CHECK_LOGIC(PIN_HZPU, SIG_D1C1 | SIG_ZZZZ, PIN_D1PU);

CHECK_LOGIC(PIN_HZNP, SIG_D0C0 | SIG_ZZZZ, PIN_D0NP);
CHECK_LOGIC(PIN_HZNP, SIG_D1C0 | SIG_ZZZZ, PIN_D1NP);
CHECK_LOGIC(PIN_HZNP, SIG_D0C1 | SIG_ZZZZ, PIN_D0NP);
CHECK_LOGIC(PIN_HZNP, SIG_D1C1 | SIG_ZZZZ, PIN_D1NP);

//-----------------------------------------------------------------------------
// pass signals are sticky

CHECK_LOGIC(REG_D0C0, SIG_PASS, REG_D0C0);
CHECK_LOGIC(REG_D1C0, SIG_PASS, REG_D1C0);
CHECK_LOGIC(REG_D0C1, SIG_PASS, REG_D0C1);
CHECK_LOGIC(REG_D1C1, SIG_PASS, REG_D1C1);
CHECK_LOGIC(PIN_D0PD, SIG_PASS, PIN_D0PD);
CHECK_LOGIC(PIN_D1PD, SIG_PASS, PIN_D1PD);
CHECK_LOGIC(PIN_D0PU, SIG_PASS, PIN_D0PU);
CHECK_LOGIC(PIN_D1PU, SIG_PASS, PIN_D1PU);
CHECK_LOGIC(PIN_D0NP, SIG_PASS, PIN_D0NP);
CHECK_LOGIC(PIN_D1NP, SIG_PASS, PIN_D1NP);
CHECK_LOGIC(PIN_HZPD, SIG_PASS, PIN_HZPD);
CHECK_LOGIC(PIN_HZPU, SIG_PASS, PIN_HZPU);
CHECK_LOGIC(PIN_HZNP, SIG_PASS, PIN_HZNP);
CHECK_LOGIC(REG_XXXX, SIG_PASS, REG_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_PASS, PIN_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_PASS, ERR_XXXX);

//-----------------------------------------------------------------------------
// hold signals are sticky

CHECK_LOGIC(REG_D0C0, SIG_HOLD, REG_D0C0 | SIG_HOLD);
CHECK_LOGIC(REG_D1C0, SIG_HOLD, REG_D1C0 | SIG_HOLD);
CHECK_LOGIC(REG_D0C1, SIG_HOLD, REG_D0C1 | SIG_HOLD);
CHECK_LOGIC(REG_D1C1, SIG_HOLD, REG_D1C1 | SIG_HOLD);
CHECK_LOGIC(PIN_D0PD, SIG_HOLD, PIN_D0PD | SIG_HOLD);
CHECK_LOGIC(PIN_D1PD, SIG_HOLD, PIN_D1PD | SIG_HOLD);
CHECK_LOGIC(PIN_D0PU, SIG_HOLD, PIN_D0PU | SIG_HOLD);
CHECK_LOGIC(PIN_D1PU, SIG_HOLD, PIN_D1PU | SIG_HOLD);
CHECK_LOGIC(PIN_D0NP, SIG_HOLD, PIN_D0NP | SIG_HOLD);
CHECK_LOGIC(PIN_D1NP, SIG_HOLD, PIN_D1NP | SIG_HOLD);
CHECK_LOGIC(PIN_HZPD, SIG_HOLD, PIN_HZPD | SIG_HOLD);
CHECK_LOGIC(PIN_HZPU, SIG_HOLD, PIN_HZPU | SIG_HOLD);
CHECK_LOGIC(PIN_HZNP, SIG_HOLD, PIN_HZNP | SIG_HOLD);
CHECK_LOGIC(REG_XXXX, SIG_HOLD, REG_XXXX | SIG_HOLD);
CHECK_LOGIC(PIN_XXXX, SIG_HOLD, PIN_XXXX | SIG_HOLD);
CHECK_LOGIC(ERR_XXXX, SIG_HOLD, ERR_XXXX | SIG_HOLD);

//-----------------------------------------------------------------------------
// error states are sticky

CHECK_LOGIC(REG_XXXX, SIG_XXXX, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_ZZZZ, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_D0C0, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_D1C0, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_D0C1, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_D1C1, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_A0C0, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_A1C0, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_A0C1, REG_XXXX);
CHECK_LOGIC(REG_XXXX, SIG_A1C1, REG_XXXX);

CHECK_LOGIC(PIN_XXXX, SIG_XXXX, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_ZZZZ, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_D0C0, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_D1C0, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_D0C1, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_D1C1, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_A0C0, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_A1C0, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_A0C1, PIN_XXXX);
CHECK_LOGIC(PIN_XXXX, SIG_A1C1, PIN_XXXX);

CHECK_LOGIC(ERR_XXXX, SIG_XXXX, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_ZZZZ, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_D0C0, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_D1C0, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_D0C1, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_D1C1, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_A0C0, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_A1C0, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_A0C1, ERR_XXXX);
CHECK_LOGIC(ERR_XXXX, SIG_A1C1, ERR_XXXX);

